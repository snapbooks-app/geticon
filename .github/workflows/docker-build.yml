name: Docker Build and Push

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Extract version from Cargo.toml
      - name: Extract version from Cargo.toml
        id: cargo_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -n 1 | sed 's/.*"\(.*\)".*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      # Check if this version already exists in the registry
      - name: Check if version exists
        id: version_check
        run: |
          # Default to publishing
          SHOULD_PUBLISH=true
          
          # Only check for existing versions on main branch pushes
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Get list of existing package versions using GitHub API
            # Try both user and org endpoints since we don't know which one is applicable
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/packages/container/geticon/versions" || \
            curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/geticon/versions")
            
            # Check if the API call was successful
            if [[ $(echo $RESPONSE | jq -r 'if type=="object" and has("message") then .message else empty end') ]]; then
              echo "API Error: $(echo $RESPONSE | jq -r '.message')"
              echo "Will publish anyway to be safe"
            else
              # Extract all tags from all versions
              TAGS=$(echo $RESPONSE | jq -r '.[].metadata.container.tags[]' 2>/dev/null || echo "")
              
              if [[ $TAGS == *"${{ env.VERSION }}"* ]]; then
                echo "Version ${{ env.VERSION }} already exists in the registry"
                SHOULD_PUBLISH=false
              else
                echo "Version ${{ env.VERSION }} does not exist in the registry"
              fi
            fi
          fi
          
          echo "SHOULD_PUBLISH=$SHOULD_PUBLISH" >> $GITHUB_ENV
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && env.SHOULD_PUBLISH == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
